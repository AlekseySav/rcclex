#!/usr/bin/env python3
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Tuple
import glob


@dataclass
class Test:
    pattern: str
    s: str
    groups: List[Tuple[str, ...]]
    err: bool

    @classmethod
    def make(cls, line: str) -> Test | None:
        ln = [s for s in line.split('\t') if s != '']
        if '#' in ln[0] or 'E' not in ln[0]:
            return None
        if len(ln) != 4:
            print(f'bad test: {line}')
            return None
        if ln[1][0] == '^' or ln[1][-1] == '$':
            return None
        if '$' not in ln[0]:
            ln[1] = ln[1].replace('\\', '\\\\')
            ln[2] = ln[2].replace('\\', '\\\\')
        if ln[2] == 'NULL':
            ln[2] = ''
        err = ln[3][0] != '('
        if err:
            groups = []
        else:
            groups = ln[3].strip('\t\n ')[1:-1].split(')(')
            groups = [tuple(f'Some({s})'.replace('Some(?)', 'None') for s in g.split(',')) for g in groups]
        return cls(ln[1], ln[2], groups, err)

    def __str__(self) -> str:
        g = ', '.join(f'({a}, {b})' for (a, b) in self.groups)
        return f'Test{{re: b"({self.pattern})", s: b"{self.s}", groups: &[{g}], err: {str(self.err).lower()}}}'


def add_tests(file):
    tests: List[Test] = []
    skipped = 0
    with open(file) as f:
        for line in f:
            t = Test.make(line)
            if t is None:
                skipped += 1
            else:
                tests.append(t)
    return tests, skipped


def main():
    tests: List[Test] = []
    skipped: int = 0
    for f in glob.glob('tools/data/*.tsv'):
        t, s = add_tests(f)
        print(f'tests suites from "{f}", configured tests: {len(t)}, skipped: {s}')
        tests += t
        skipped += s

    print(f'Configured tests: {len(tests)}, skipped: {skipped}')
    with open('src/t.rs', 'w') as f:
        print('const ATT_RE_TESTS_LIST: &[Test<\'static>] = &[', file=f)
        for t in tests:
            print(f'\t{t},', file=f)
        print('];', file=f)



if __name__ == '__main__':
    main()
