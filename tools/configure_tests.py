#!/usr/bin/env python3
import requests
from typing import Tuple
from dataclasses import dataclass


'''
get perl tests and use them for testing for testing

https://perl5.git.perl.org/perl5.git/blob/HEAD:/t/re/regexp.t
'''

SOURCE = '''\
// generated by tools/configure_tests.py

#[derive(Debug, PartialEq)]
enum ReMatchResult<'a> {{ Err, No, Yes(&'a [u8]) }}

struct ReTestSuite {{ re: &'static [u8], s: &'static [u8], res: ReMatchResult<'static> }}

static RE_TEST_SUITES: &'static [ReTestSuite] = &[
\t{TESTS},
];
'''

@dataclass
class ReTestSuite:
    re: str
    s: str
    res: Tuple[str, str | None]

    def __str__(self):
        v = '' if self.res[1] is None else f'(b"{self.res[1]}")'
        return f'ReTestSuite{{ re: b"{self.re}", s: b"{self.s}", res: ReMatchResult::{self.res[0]}{v} }}'


res_map = {
    'c': 'Err',
    'n': 'No',
    'y': 'Yes',
}


def main():
    response = requests.get('https://perl5.git.perl.org/perl5.git/blob_plain/HEAD:/t/re/re_tests')
    tests = []
    for line in response.iter_lines():
        line = line.decode().replace('\\', '\\\\').replace('"', '\\"')
        if not line or line[0] == '#' or line == '__END__':
            continue
        re, s, res, loc, expected, *_ = line.split('\t') + [None] * 5
        if res not in 'ync':
            continue
        if res != 'y':
            loc, expected = None, None
        if loc is not None and loc != '$&':
            continue
        if re[0] == '^' or re[-1] == '$':
            continue
        if '{' in re:
            continue
        tests.append(ReTestSuite(re, s, (res_map[res], expected)))
    with open('src/re/t.rs', 'w') as f:
        print(SOURCE.format(TESTS=',\n\t'.join(map(str, tests))), file=f)


if __name__ == '__main__':
    main()
